{"version":3,"sources":["webpack:///./node_modules/d3-ease/src/cubic.js","webpack:///./src/hooks/useOnlyFirst.ts","webpack:///./node_modules/react-use/esm/useEffectOnce.js","webpack:///./node_modules/react-use/esm/useMount.js","webpack:///./node_modules/react-use/esm/useInterval.js","webpack:///./src/hooks/useType.ts","webpack:///./src/hooks/useTypeSentence.ts","webpack:///./src/components/organisms/TypeScene.tsx","webpack:///./src/components/templates/IndexTemplate.tsx","webpack:///./src/pages/index.tsx"],"names":["cubicInOut","t","effect","fn","callback","delay","savedCallback","current","interval_1","setInterval","clearInterval","useType","text","wait","useState","count","setCount","_wait","setWait","finished","length","useEffect","useInterval","split","slice","join","start","TypeScene","sentence","onFinish","className","types","map","useMount","finishCount","filter","type","handler","setTimeout","clearTimeout","every","useTypeSentence","_sentence","Center","index","Text","key","IndexTemplate","localStorage","Boolean","getItem","visited","setVisited","visit","useCallback","setItem","useOnlyFirst","scene","setScene","setHandler","transitions","useTransition","initial","transform","from","enter","leave","config","duration","easing","easeCubicInOut","useMemo","item","props","AnimatedBox","style","timeout","animated","RootPage"],"mappings":"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","file":"component---src-pages-index-tsx-8dd15870554b8dbe3360.js","sourcesContent":["export function cubicIn(t) {\n  return t * t * t;\n}\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}","import { useCallback, useState } from \"react\";\n\n/**\n * 初回しか表示させない制御をする際に利用する\n */\nexport const useOnlyFirst = (key: string) => {\n  const [visited, setVisited] = useState(\n    typeof localStorage !== \"undefined\"\n      ? Boolean(localStorage.getItem(key))\n      : false);\n\n  const visit = useCallback(() => {\n    typeof localStorage !== \"undefined\"\n     && localStorage.setItem(key, \"true\")\n    setVisited(true);\n  }, [key]);\n\n  return {\n    visited,\n    visit\n  };\n};\n","import { useEffect } from 'react';\n\nvar useEffectOnce = function useEffectOnce(effect) {\n  useEffect(effect, []);\n};\n\nexport default useEffectOnce;","import useEffectOnce from './useEffectOnce';\n\nvar useMount = function useMount(fn) {\n  useEffectOnce(function () {\n    fn();\n  });\n};\n\nexport default useMount;","import { useEffect, useRef } from 'react';\n\nvar useInterval = function useInterval(callback, delay) {\n  var savedCallback = useRef(function () {});\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    if (delay !== null) {\n      var interval_1 = setInterval(function () {\n        return savedCallback.current();\n      }, delay || 0);\n      return function () {\n        return clearInterval(interval_1);\n      };\n    }\n\n    return undefined;\n  }, [delay]);\n};\n\nexport default useInterval;","import { useEffect, useState } from \"react\"\nimport { useInterval, useMount } from \"react-use\"\n\n\n\nexport const useType = (text: string, wait: boolean = false,\n                        delay: number = 50): { text: string, finished: boolean, start: () => void } => {\n  const [count, setCount] = useState(0)\n  const [_wait, setWait] = useState(wait)\n  const finished = count >= text.length\n\n  useEffect(() => {setWait(wait)}, [wait])\n  useInterval(() => {\n    !_wait && !finished && setCount(count + 1)\n  }, delay)\n\n  return {\n    text: text.split(\"\").slice(0, count).join(\"\"),\n    finished,\n    start: () => setWait(false)\n  }\n}\n","import { useEffect, useState } from \"react\"\nimport { useMount } from \"react-use\"\nimport { useType } from \"./useType\"\n\nexport const useTypeSentence = (sentence: string[], delay: number = 50) => {\n  const types = sentence.map(text => useType(text, true, delay))\n  const [count, setCount] = useState(0)\n\n  useMount(() => {\n    types[0]?.start();\n  })\n  const finishCount = types.filter(type => type.finished).length\n  useEffect(() => {\n    if (finishCount === 0) return\n    const current = count + 1\n    setCount(current)\n    const handler = setTimeout(() => types[current]?.start(), 1000)\n    return () => {\n      clearTimeout(handler)\n    }\n  },[finishCount])\n\n  return {\n    sentence: types.map(({text}) => text).filter(text => text),\n    finished: types.every(type => type.finished)\n  }\n}\n","import styled from \"@emotion/styled\";\nimport React, { FC, useEffect } from \"react\";\nimport { DesignProps } from \"../../../types/props\";\nimport { useTypeSentence } from \"../../hooks/useTypeSentence\";\nimport { Center } from \"../atoms/Center\";\n\ntype Props = {\n  sentence: string[];\n  onFinish: () => unknown;\n} & DesignProps;\nexport const TypeScene: FC<Props> = ({ sentence, onFinish, className }) => {\n  const { sentence: _sentence, finished } = useTypeSentence(sentence);\n\n  useEffect(() => {\n    if (finished) onFinish();\n  }, [finished]);\n\n  return <Center className={className}>\n    {_sentence.map((text, index) => <Text key={index}>{text}</Text>)}\n  </Center>;\n};\n\nconst Text = styled.p`\nmargin: .2rem;\nfont-size: 1.5em;\n`;\n","import styled from \"@emotion/styled\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport React, { FC, useEffect, useMemo, useState } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport { useOnlyFirst } from \"../../hooks/useOnlyFirst\";\nimport { Backboard } from \"../atoms\";\nimport { Room } from \"../organisms/room\";\nimport { TypeScene } from \"../organisms/TypeScene\";\n\nexport const IndexTemplate: FC = () => {\n  const { visit, visited } = useOnlyFirst(\"INDEX_VIEWED\");\n  const [scene, setScene] = useState<number>(visited ? 1 : 0);\n  const [handler, setHandler] = useState<NodeJS.Timer | null>(null);\n\n  useEffect(() => {\n    return () => {handler && clearTimeout(handler);};\n  }, [handler]);\n\n  const transitions = useTransition(scene, null, {\n    initial: { transform: \"translateX(0vw)\" },\n    from: { transform: \"translateX(150vw)\" },\n    enter: { transform: \"translateX(0vw)\" },\n    leave: { transform: \"translateX(-150vw)\" },\n    config: { duration: 1500, easing: easeCubicInOut }\n  });\n\n  const sentence = useMemo(() => [\n    \"Hi people :)\",\n    \"Welcome to a certain lazy programmer's site X)\"\n  ], []);\n\n  return <Backboard>\n    {transitions.map(({ item, key, props }) =>\n      item === 0 ?\n        <AnimatedBox key={key} style={props}>\n          <TypeScene sentence={sentence} onFinish={() => {\n            const timeout = setTimeout(() => {\n              visit();\n              setScene(1);\n            }, 500);\n            setHandler(timeout);\n          }}/>\n        </AnimatedBox> :\n        <AnimatedBox key={key} style={props}>\n          <Room/>\n        </AnimatedBox>)}\n  </Backboard>;\n};\n\n\nconst AnimatedBox = animated(styled.div`\nposition: fixed;\nwidth: 100vw;\n`);\n","import { graphql } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport { IndexTemplate } from \"../components/templates/IndexTemplate\";\nimport SEO from \"../metas/seo\";\n\nconst RootPage: FC = () => <>\n  <SEO/>\n  <IndexTemplate/>\n</>;\n\nexport default RootPage;\n\nconst query = graphql`query {\n  file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n    childImageSharp {\n      fixed(width: 125, height: 125) {\n        ...GatsbyImageSharpFixed\n      }\n    }\n  }\n}`;\n\n"],"sourceRoot":""}