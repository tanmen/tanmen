{"version":3,"sources":["webpack:///./src/components/templates/PostTemplate.tsx","webpack:///./src/templates/post.tsx","webpack:///./src/components/molecules/Breadcrumb.tsx","webpack:///./node_modules/date-fns/esm/compareDesc/index.js","webpack:///./src/utils/converters/postConverter.ts","webpack:///./src/utils/comparetors/postComparetor.ts"],"names":["PostTemplate","title","createdAt","updatedAt","tags","html","side","items","useMemo","name","path","direction","Centering","Breadcrumb","Content","PostBox","Header","Title","Property","Tags","map","Tag","key","Times","DateAt","format","className","dangerouslySetInnerHTML","__html","dates","Post","query","data","markdownRemark","frontmatter","allMarkdownRemark","Date","fieldValue","count","totalCount","posts","edges","convertPostPick","sort","postPickCountDescOrder","a","b","compareDesc","transitions","useTransition","item","from","opacity","enter","leave","Box","index","props","length","Fragment","Item","to","style","animated","dirtyDateLeft","dirtyDateRight","arguments","dateLeft","dateRight","diff","getTime","node","excerpt"],"mappings":"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","file":"component---src-templates-post-tsx-132c958f0aa449382fa3.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport { format } from \"date-fns\";\nimport React, { FC, useMemo } from \"react\";\nimport { DateCountList, Jumbotron, Layout, Side, TagCountList } from \"../molecules\";\nimport { Breadcrumb } from \"../molecules/Breadcrumb\";\n\ntype Props = Post & {\n  side: {\n    tags: PostCount[]\n    dates: PostCount[]\n  }\n}\n\nexport const PostTemplate: FC<Props> = ({ title, createdAt, updatedAt, tags, html, side }) => {\n  const items = useMemo(() => title ? [{ name: \"Top\", path: \"/posts\" }, { name: title, path: `/posts/${title}` }]\n    : [{ name: \"Top\", path: \"/posts\" }], [title]);\n  return <Layout direction=\"left\">\n    <Jumbotron/>\n    <Centering>\n      <Breadcrumb items={items}/>\n      <Content>\n        <PostBox>\n          <Header>\n            <Title>{title}</Title>\n            <Property>\n              <Tags>{tags.map(name => <Tag key={name}>{name}</Tag>)}</Tags>\n              <Times>\n                <DateAt>作成日: {format(createdAt, \"yyyy/MM/dd\")}</DateAt>\n                <DateAt>更新日: {format(updatedAt, \"yyyy/MM/dd\")}</DateAt>\n              </Times>\n            </Property>\n          </Header>\n          <Post className=\"markdown-body\" dangerouslySetInnerHTML={{ __html: html }}/>\n        </PostBox>\n        <Side>\n          <TagCountList tags={side.tags}/>\n          <DateCountList dates={side.dates}/>\n        </Side>\n      </Content>\n    </Centering>\n  </Layout>;\n};\n\nconst Header = styled.header`\nmargin: .67em 0 16px;\npadding-bottom: .3em;\nborder-bottom: 1px solid #343a40;\n`;\n\nconst Title = styled.h1`\nfont-size: 2em;\nfont-weight: 600;\nline-height: 1.25;\n`;\n\nconst Centering = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n`;\n\nconst Content = styled.div`\ndisplay: flex;\nwidth: 1000px;\njustify-content: space-between;\n`;\n\nconst PostBox = styled.div`\ndisplay: flex;\nflex-direction: column;\nwidth: 1000px;\n`;\n\nconst Post = styled.div`\nwidth: 100%;\n`;\n\nconst Property = styled.div`\ndisplay: flex;\njustify-content: space-between;\n`;\n\nconst Tags = styled.div`\nmargin: 1rem 0 .75rem;\n`;\n\nconst Tag = styled.span`\nborder-radius: .25rem;\nbackground-color: #4f5558;\npadding: .25rem;\n& + & {\n  margin-left: .5rem;\n}\n`;\n\nconst Times = styled.div`\ndisplay: flex;\nalign-items: center;\n`;\n\nconst DateAt = styled.span`\n& + & {\n  margin-left: .5em;\n}\n`;\n","import compareDesc from \"date-fns/compareDesc\";\nimport { graphql } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport { DeepNonNullable } from \"utility-types\";\nimport { PostQuery } from \"../../types/gatsby-graphql\";\nimport { PostTemplate } from \"../components/templates/PostTemplate\";\nimport SEO from \"../metas/seo\";\nimport { postPickCountDescOrder } from \"../utils/comparetors\";\nimport { convertPostPick } from \"../utils/converters\";\n\nconst Post: FC<{ data: DeepNonNullable<PostQuery> }> = ({ data: { markdownRemark: { frontmatter:{title, createdAt, updatedAt, tags},html }, allMarkdownRemark } }) =>\n  <>\n    <SEO title={title}/>\n    <PostTemplate\n      title={title}\n      createdAt={new Date(createdAt)}\n      updatedAt={new Date(updatedAt)}\n      tags={tags}\n      html={html}\n      side={{\n        tags: allMarkdownRemark.tags.map(\n          ({ fieldValue: name, totalCount: count, edges }) =>\n            ({ name, count, posts: edges.map(convertPostPick) }))\n          .sort(postPickCountDescOrder),\n        dates: allMarkdownRemark.dates.map(\n          ({ fieldValue: name, totalCount: count, edges }) =>\n            ({ name, count, posts: edges.map(convertPostPick) }))\n          .sort((a, b) => compareDesc(new Date(a.name), new Date(b.name)))\n      }}/>\n  </>;\n\nexport default Post;\n\nexport const query = graphql`query Post($title: String) {\n  markdownRemark(frontmatter: {title: {eq: $title}}) {\n    frontmatter {\n      title\n      createdAt\n      updatedAt\n      tags\n    }\n    html\n  }\n  allMarkdownRemark {\n    dates: group(field: frontmatter___createdMonthAt) {\n      fieldValue\n      totalCount\n      edges {\n        ...PostPick\n      }\n    }\n    tags: group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n      edges {\n        ...PostPick\n      }\n    }\n  }\n}`;\n","import styled from \"@emotion/styled\";\nimport React, { FC } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport { ActiveLink } from \"../atoms/links\";\n\ntype Link = {\n  name: string\n  path: string\n}\n\ntype Props = {\n  items: Link[]\n}\n\nexport const Breadcrumb: FC<Props> = ({ items }) => {\n  const transitions = useTransition(items, (item: Link) => item.path, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 }\n  });\n  return <Box>\n    {transitions.map(({ item, key, props }, index) =>\n      index + 1 < items.length\n        ? <React.Fragment key={key}><Item><ActiveLink\n          to={item.path}>{item.name}</ActiveLink></Item><span>/</span></React.Fragment>\n        : items.length === 1\n        ? <Item key={key}>{item.name}</Item>\n        : <Item key={key} style={props}>{item.name}</Item>)}\n  </Box>;\n};\n\n\nconst Box = styled.ol`\ndisplay: flex;\nwidth: 970px;\nflex-wrap: wrap;\npadding: .75rem 1rem;\nmargin-bottom: 1rem;\nlist-style: none;\ncolor: #6c757d;\nbackground-color: #343a40;\nborder-radius: .25rem;\n`;\n\nconst Item = animated(styled.li`\ndisplay: list-item;\ntext-align: -webkit-match-parent;\n& + * {\n  margin-left: 5px;\n}\n* + & {\n  margin-left: 5px;\n}\n`);\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareDesc\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * var result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import { DeepNonNullable } from \"utility-types\";\nimport { PostPickFragment } from \"../../../types/gatsby-graphql\";\n\nexport const convertPostPick = ({ node: { excerpt, frontmatter: { title, createdAt, tags } } }: DeepNonNullable<PostPickFragment>) =>\n  ({ title, createdAt: new Date(createdAt), excerpt, tags });\n","export const postPickCountDescOrder = (a: PostCount, b: PostCount) => {\n  if (a.count < b.count) {\n    return 1;\n  } else if (a.count > b.count) {\n    return -1;\n  }\n  return 0;\n};\n"],"sourceRoot":""}