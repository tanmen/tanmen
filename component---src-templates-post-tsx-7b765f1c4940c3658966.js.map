{"version":3,"sources":["webpack:///./src/components/templates/PostTemplate.tsx","webpack:///./src/templates/post.tsx","webpack:///./src/components/molecules/Breadcrumb.tsx","webpack:///./node_modules/date-fns/esm/compareDesc/index.js","webpack:///./src/utils/converters/postConverter.ts","webpack:///./src/utils/comparetors/postComparetor.ts"],"names":["PostTemplate","active","html","tags","dates","items","useMemo","name","path","direction","Centering","Breadcrumb","PostBox","className","dangerouslySetInnerHTML","__html","Post","query","data","markdownRemark","allMarkdownRemark","title","pageContext","map","fieldValue","count","totalCount","posts","edges","convertPostPick","sort","postPickCountDescOrder","a","b","compareDesc","Date","transitions","useTransition","item","from","opacity","enter","leave","Box","index","key","props","length","Fragment","Item","to","style","animated","dirtyDateLeft","dirtyDateRight","arguments","dateLeft","dateRight","diff","getTime","node","excerpt","frontmatter","createdAt"],"mappings":"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","file":"component---src-templates-post-tsx-7b765f1c4940c3658966.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport React, { FC, useMemo } from \"react\";\nimport { DateCountList, Jumbotron, Layout, Side, TagCountList } from \"../molecules\";\nimport { Breadcrumb } from \"../molecules/Breadcrumb\";\n\ntype Props = {\n  html: string\n  tags: PostCount[]\n  dates: PostCount[]\n  active?: string\n}\n\nexport const PostTemplate: FC<Props> = ({ active, html, tags, dates }) => {\n  const items = useMemo(() => active ? [{ name: \"Top\", path: \"/posts\" }, { name: active, path: `/posts/${active}` }]\n    : [{ name: \"Top\", path: \"/posts\" }], [active]);\n  return <Layout direction=\"left\">\n    <Jumbotron/>\n    <Centering>\n      <Breadcrumb items={items}/>\n      <PostBox>\n        <Post className=\"markdown-body\" dangerouslySetInnerHTML={{ __html: html }}/>\n        <Side>\n          <TagCountList tags={tags}/>\n          <DateCountList dates={dates}/>\n        </Side>\n      </PostBox>\n    </Centering>\n  </Layout>;\n};\n\n\nconst Centering = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n`;\n\n\nconst PostBox = styled.div`\ndisplay: flex;\nwidth: 1000px;\njustify-content: space-between;\n`;\n\nconst Post = styled.div`\nwidth: 100%;\n`;\n","import compareDesc from \"date-fns/compareDesc\";\nimport { graphql } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport { DeepNonNullable } from \"utility-types\";\nimport { PostQuery } from \"../../types/gatsby-graphql\";\nimport { PostTemplate } from \"../components/templates/PostTemplate\";\nimport SEO from \"../metas/seo\";\nimport { postPickCountDescOrder } from \"../utils/comparetors\";\nimport { convertPostPick } from \"../utils/converters\";\n\nconst Post: FC<{ data: DeepNonNullable<PostQuery>, pageContext: { title: string } }> = ({ data: { markdownRemark: { html }, allMarkdownRemark: { dates, tags } }, pageContext: { title } }) =>\n  <>\n    <SEO title={title}/>\n    <PostTemplate\n      active={title}\n      html={html}\n      tags={tags.map(\n        ({ fieldValue: name, totalCount: count, edges }) =>\n          ({ name, count, posts: edges.map(convertPostPick) }))\n        .sort(postPickCountDescOrder)}\n      dates={dates.map(\n        ({ fieldValue: name, totalCount: count, edges }) =>\n          ({ name, count, posts: edges.map(convertPostPick) }))\n        .sort((a, b) => compareDesc(new Date(a.name), new Date(b.name)))}/>\n  </>;\n\nexport default Post;\n\nexport const query = graphql`query Post($title: String) {\n  markdownRemark(frontmatter: {title: {eq: $title}}) {\n    html\n  }\n  allMarkdownRemark {\n    dates: group(field: frontmatter___createdMonthAt) {\n      fieldValue\n      totalCount\n      edges {\n        ...PostPick\n      }\n    }\n    tags: group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n      edges {\n        ...PostPick\n      }\n    }\n  }\n}`;\n","import styled from \"@emotion/styled\";\nimport React, { FC } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport { ActiveLink } from \"../atoms/links\";\n\ntype Link = {\n  name: string\n  path: string\n}\n\ntype Props = {\n  items: Link[]\n}\n\nexport const Breadcrumb: FC<Props> = ({ items }) => {\n  const transitions = useTransition(items, (item: Link) => item.path, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 }\n  });\n  return <Box>\n    {transitions.map(({ item, key, props }, index) =>\n      index + 1 < items.length\n        ? <React.Fragment key={key}><Item><ActiveLink\n          to={item.path}>{item.name}</ActiveLink></Item><span>/</span></React.Fragment>\n        : items.length === 1\n          ? <Item key={key}>{item.name}</Item>\n          : <Item key={key} style={props}>{item.name}</Item>)}\n  </Box>;\n};\n\n\nconst Box = styled.ol`\ndisplay: flex;\nwidth: 970px;\nflex-wrap: wrap;\npadding: .75rem 1rem;\nmargin-bottom: 1rem;\nlist-style: none;\ncolor: #6c757d;\nbackground-color: #343a40;\nborder-radius: .25rem;\n`;\n\nconst Item = animated(styled.li`\ndisplay: list-item;\ntext-align: -webkit-match-parent;\n& + * {\n  margin-left: 5px;\n}\n* + & {\n  margin-left: 5px;\n}\n`);\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareDesc\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * var result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import { DeepNonNullable } from \"utility-types\";\nimport { PostPickFragment } from \"../../../types/gatsby-graphql\";\n\nexport const convertPostPick = ({ node: { excerpt, frontmatter: { title, createdAt, tags } } }: DeepNonNullable<PostPickFragment>) =>\n  ({ title, createdAt: new Date(createdAt), excerpt, tags });\n","export const postPickCountDescOrder = (a: PostCount, b: PostCount) => {\n  if (a.count < b.count) {\n    return 1;\n  } else if (a.count > b.count) {\n    return -1;\n  }\n  return 0;\n};\n"],"sourceRoot":""}