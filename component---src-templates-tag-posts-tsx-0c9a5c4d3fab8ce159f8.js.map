{"version":3,"sources":["webpack:///./src/components/templates/PostsTemplate.tsx","webpack:///./src/components/molecules/Breadcrumb.tsx","webpack:///./node_modules/date-fns/esm/compareDesc/index.js","webpack:///./src/templates/tagPosts.tsx"],"names":["PostsTemplate","active","posts","tags","dates","items","useMemo","name","path","direction","Centering","PostBox","Breadcrumb","transitions","useTransition","item","from","opacity","enter","leave","Box","map","index","key","props","length","Fragment","Item","to","style","animated","compareDesc","dirtyDateLeft","dirtyDateRight","arguments","dateLeft","dateRight","diff","getTime","TagPosts","data","edges","tag","pageContext","title","convertPostPick","fieldValue","count","totalCount","sort","compare","a","b","Date","query","node","value","headings","excerpt","frontmatter","createdAt"],"mappings":"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","file":"component---src-templates-tag-posts-tsx-0c9a5c4d3fab8ce159f8.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport React, { FC, useMemo } from \"react\";\nimport { DateCountList, Header, Jumbotron, Layout, PostCardList, Side, TagCountList } from \"../molecules\";\nimport { Breadcrumb } from \"../molecules/Breadcrumb\";\nimport { Footer } from \"../molecules/Footer\";\n\ntype Props = {\n  posts: PostPick[]\n  tags: PostCount[]\n  dates: PostCount[]\n  active?: string\n}\n\nexport const PostsTemplate: FC<Props> = ({ active, posts, tags, dates }) => {\n  const items = useMemo(() => active ? [{ name: \"Top\", path: \"/posts\" }, { name: active, path: `/posts/${active}` }]\n    : [{ name: \"Top\", path: \"/posts\" }], [active]);\n  return <Layout direction=\"left\">\n    <Jumbotron/>\n    <Centering>\n      <Breadcrumb items={items}/>\n      <PostBox>\n        <PostCardList posts={posts}/>\n        <Side>\n          <TagCountList tags={tags}/>\n          <DateCountList dates={dates}/>\n        </Side>\n      </PostBox>\n    </Centering>\n  </Layout>;\n};\n\nconst Centering = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n`;\n\nconst PostBox = styled.div`\ndisplay: flex;\nwidth: 1000px;\njustify-content: space-between;\n`;\n","import styled from \"@emotion/styled\";\nimport React, { FC } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport { ActiveLink } from \"../atoms/links\";\n\ntype Link = {\n  name: string\n  path: string\n}\n\ntype Props = {\n  items: Link[]\n}\n\nexport const Breadcrumb: FC<Props> = ({ items }) => {\n  const transitions = useTransition(items, (item: Link) => item.path, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 }\n  });\n  return <Box>\n    {transitions.map(({ item, key, props }, index) =>\n      index + 1 < items.length\n        ? <React.Fragment key={key}><Item><ActiveLink\n          to={item.path}>{item.name}</ActiveLink></Item><span>/</span></React.Fragment>\n        : items.length === 1\n          ? <Item key={key}>{item.name}</Item>\n          : <Item key={key} style={props}>{item.name}</Item>)}\n  </Box>;\n};\n\n\nconst Box = styled.ol`\ndisplay: flex;\nwidth: 970px;\nflex-wrap: wrap;\npadding: .75rem 1rem;\nmargin-bottom: 1rem;\nlist-style: none;\ncolor: #6c757d;\nbackground-color: #343a40;\nborder-radius: .25rem;\n`;\n\nconst Item = animated(styled.li`\ndisplay: list-item;\ntext-align: -webkit-match-parent;\n& + * {\n  margin-left: 5px;\n}\n* + & {\n  margin-left: 5px;\n}\n`);\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareDesc\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * var result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import compareDesc from \"date-fns/compareDesc\";\nimport { graphql } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport { DeepNonNullable } from \"utility-types\";\nimport { PostPickFragment, TagPostsQuery } from \"../../types/gatsby-graphql\";\nimport { PostsTemplate } from \"../components/templates/PostsTemplate\";\nimport SEO from \"../metas/seo\";\n\nconst TagPosts: FC<{ data: DeepNonNullable<TagPostsQuery>, pageContext: { tag: string } }> = ({ data: { posts: { edges }, data: { tags, dates } }, pageContext: { tag } }) =>\n  <>\n    <SEO title={`Posts(${tag})`}/>\n    <PostsTemplate\n    active={`tags / ${tag}`}\n    posts={edges.map(convertPostPick)}\n    tags={tags.map(\n      ({ fieldValue: name, totalCount: count, edges }) =>\n        ({ name, count, posts: edges.map(convertPostPick) }))\n      .sort(compare)}\n    dates={dates.map(\n      ({ fieldValue: name, totalCount: count, edges }) =>\n        ({ name, count, posts: edges.map(convertPostPick) }))\n      .sort((a, b) => compareDesc(new Date(a.name), new Date(b.name)))}/>\n  </>;\n\nexport default TagPosts;\n\nexport const query = graphql`query TagPosts($tag: String) {\n  posts: allMarkdownRemark(filter: {frontmatter: {tags: {in: [$tag]}}}, sort: {order: DESC, fields: frontmatter___createdAt}) {\n    edges {\n      ...PostPick\n    }\n  }\n  data: allMarkdownRemark {\n    dates: group(field: frontmatter___createdMonthAt) {\n      fieldValue\n      totalCount\n      edges {\n        ...PostPick\n      }\n    }\n    tags: group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n      edges {\n        ...PostPick\n      }\n    }\n  }\n}`;\n\nconst convertPostPick = ({ node: { headings: [{ value }], excerpt, frontmatter: { createdAt, tags } } }: DeepNonNullable<PostPickFragment>) =>\n  ({ title: value, createdAt: new Date(createdAt), excerpt, tags });\n\nconst compare = (a: PostCount, b: PostCount) => {\n  if (a.count < b.count) {\n    return 1;\n  } else if (a.count > b.count) {\n    return -1;\n  }\n  return 0;\n};\n"],"sourceRoot":""}