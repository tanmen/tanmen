{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Openapiファイルをディレクトリ構造で管理する","result":{"data":{"markdownRemark":{"html":"<h1>Openapiファイルをディレクトリ構造で管理する</h1>\n<p>Openapiは便利ですよね。</p>\n<p>Openapiファイルがあれば、Client生成できますし、Mockサーバも作成でき、サーバ同士の通信でも使えますし、どんなデータを許容するのかもわかります。(きちんと書いていればですが..)</p>\n<p>ただ、しばらく利用してみて色々な不満がでてきます。(どんなライブラリやツールでもそうですが)</p>\n<p>その不満の中でも、Openapiが分割管理出来ない点が特に不満を感じます。</p>\n<p>分割管理が行えないと複数チームでの運用時に、コンフリクトが発生する頻度が高く運用を工夫する必要がでてきます。</p>\n<p>昔のようなDBマイグレーションのようなブランチ運用をしたくない場合、コンフリクトが発生しやすいのは大変煩わしいです。</p>\n<p>ただ、ありがたいことに、上記の課題は他の方々も課題を感じているようで、世の中に色々解決する手段があります。</p>\n<p>そして公式の構文でも<code class=\"language-text\">$ref</code>という構文である程度の分割を出来るようになっています。</p>\n<p>ただ公式の<code class=\"language-text\">$ref</code>も根本解決されません。</p>\n<h2>公式の<code class=\"language-text\">$ref</code>問題</h2>\n<p><code class=\"language-text\">$ref</code>は以下のDocumentにある通り、非常に様々な書き方があります。\nただこちらも使える場所が決まっています。</p>\n<p>基本コンフリクトが発生する部分は、<code class=\"language-text\">paths</code>と<code class=\"language-text\">components/schemas</code>以下がコンフリクトが発生します。</p>\n<p>例えば以下の追加をbranchを分けてしようとするとコンフリクトが発生してしまいます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">/A</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Aチームが新しいエンドポイントの追加</span>\n    <span class=\"token key atrule\">$ref</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./paths/A.yml#\"</span>\n  <span class=\"token key atrule\">/B</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Bチームが新しいエンドポイントの追加</span>\n    <span class=\"token key atrule\">$ref</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./paths/B.yml#\"</span></code></pre></div>\n<p>しかし、上記の時点でコンフリクトの解消難易度は低く、問題視しない選択肢も出てきます。\nただ、私はコンフリクトが発生する事自体を問題視しているので、上記の選択肢は排除しています。</p>\n<p>ただ上記のようなコンフリクトを解消するようなライブラリが、私が探した限りだと見つからず。\n今回諦め、yamlをコンフリクトせず管理するようなライブラリを作成しました。</p>\n<h2>OpenapiYaml</h2>\n<h3>設計</h3>\n<p>yamlをコンフリクトせずに、分割させるにはエンドポイントの追加や削除で<code class=\"language-text\">paths</code>直下のプロパティが変化しない事と、\nモデルの追加、削除で<code class=\"language-text\">components/schemas</code>配下が変化しない設計が必要になります。</p>\n<p>今回の設計では、それをディレクトリ構造で解決しています。</p>\n<p>以下のようなディレクトリ構造で<code class=\"language-text\">OpenapiYaml</code>を利用した場合</p>\n<div class=\"gatsby-highlight\" data-language=\"plantuml\"><pre class=\"language-plantuml\"><code class=\"language-plantuml\">@startmindmap\nskinparam monochrome true\nskinparam ArrowColor White\n* &lt;&amp;folder&gt;Root\n** &lt;&amp;file&gt;openapi.yml\n** &lt;&amp;folder&gt;paths\n*** &lt;&amp;folder&gt;@pets\n**** &lt;&amp;file&gt;get.yml\n*** &lt;&amp;file&gt;@pets@{id}.yml\n** &lt;&amp;folder&gt;components\n*** &lt;&amp;folder&gt;schemas\n*** &lt;&amp;folder&gt;securities\n*** ...\n@endmindmap</code></pre></div>\n<blockquote>\n<p>ファイル名の@は/の特殊文字<br/>\nファイル名に/が使えない為出来た仕様です</p>\n</blockquote>\n<p><code class=\"language-text\">Root/openapi.yml</code>には以下の内容だけを記載すればよく、おそらくこのファイルを変更することは二度となく、他のファイルに関してもほぼコンフリクトはないでしょう。</p>\n<div class=\"gatsby-code-title\">openapi.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">$dir</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./paths\"</span>\n<span class=\"token key atrule\">components</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">$dir</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./components\"</span></code></pre></div>\n<h2>まとめ</h2>\n<p>Openapiを利用してて、苦労する部分はまだまだあると思います。\n仕様自体が曖昧な部分もたくさんありますし、誰も困ってないからこそ手をつけられてない微妙な仕様があったりします。</p>\n<p>ただこれだけ使われていて、大きな力を持っている仕様を絶やさない為にもコントリビュートや、便利にするライブラリを作りOpenapi界隈を盛り上げていくつもりです。</p>\n<h2>本来的な話</h2>\n<p>今回はドキュメント駆動開発での話が主でした。\nただ、Openapiはサーバから配布される形が主な為、サーバ駆動開発で行った場合は今回の問題点は全て関係ありません。</p>\n<p>サーバ駆動開発で行った際に何故問題が解消されるのかというと、サーバ駆動開発ではOpenapiのドキュメントを管理することがなく、自動生成で生成されたOpenapiファイルを、実行されているAPIから受け取る形式になっているからです。</p>\n<p>実態のドキュメントが無いため、ドキュメントを管理する上で起きるコンフリクトが起きないといった形です。\nドキュメント駆動開発以外の選択肢が取れ、Openapiのコンフリクトに悩まされている場合はサーバ駆動開発にシフトするのもありだと思います。</p>"},"allMarkdownRemark":{"dates":[{"fieldValue":"2020-08","totalCount":2,"edges":[{"node":{"headings":[{"value":"ブログ始めました","depth":1},{"value":"どんな人か","depth":2},{"value":"どんな内容を記載していくか","depth":2}],"excerpt":"ブログ始めました 某社にて新卒採用していただいてから4年がたったので、そろそろ自分の知識や考えを棚卸しをし、文章にまとめようと思いブログをはじめました。 どんな人か バックエンドエンジニアで入社しましたが、何故かフロントエンドをやる比率がいつのまにか高くなりフロントエンドエンジ…","frontmatter":{"createdAt":"2020-08-09","tags":["お知らせ"]}}},{"node":{"headings":[{"value":"Openapiファイルをディレクトリ構造で管理する","depth":1},{"value":"公式の<code class=\"language-text\">$ref</code>問題","depth":2},{"value":"OpenapiYaml","depth":2},{"value":"設計","depth":3},{"value":"まとめ","depth":2},{"value":"本来的な話","depth":2}],"excerpt":"Openapiファイルをディレクトリ構造で管理する Openapiは便利ですよね。 Openapiファイルがあれば、Client生成できますし、Mockサーバも作成でき、サーバ同士の通信でも使えますし、どんなデータを許容するのかもわかります。(きちんと書いていればですが..) …","frontmatter":{"createdAt":"2020-08-17","tags":["Node","Openapi","Tool"]}}}]}],"tags":[{"fieldValue":"Node","totalCount":1,"edges":[{"node":{"headings":[{"value":"Openapiファイルをディレクトリ構造で管理する","depth":1},{"value":"公式の<code class=\"language-text\">$ref</code>問題","depth":2},{"value":"OpenapiYaml","depth":2},{"value":"設計","depth":3},{"value":"まとめ","depth":2},{"value":"本来的な話","depth":2}],"excerpt":"Openapiファイルをディレクトリ構造で管理する Openapiは便利ですよね。 Openapiファイルがあれば、Client生成できますし、Mockサーバも作成でき、サーバ同士の通信でも使えますし、どんなデータを許容するのかもわかります。(きちんと書いていればですが..) …","frontmatter":{"createdAt":"2020-08-17","tags":["Node","Openapi","Tool"]}}}]},{"fieldValue":"Openapi","totalCount":1,"edges":[{"node":{"headings":[{"value":"Openapiファイルをディレクトリ構造で管理する","depth":1},{"value":"公式の<code class=\"language-text\">$ref</code>問題","depth":2},{"value":"OpenapiYaml","depth":2},{"value":"設計","depth":3},{"value":"まとめ","depth":2},{"value":"本来的な話","depth":2}],"excerpt":"Openapiファイルをディレクトリ構造で管理する Openapiは便利ですよね。 Openapiファイルがあれば、Client生成できますし、Mockサーバも作成でき、サーバ同士の通信でも使えますし、どんなデータを許容するのかもわかります。(きちんと書いていればですが..) …","frontmatter":{"createdAt":"2020-08-17","tags":["Node","Openapi","Tool"]}}}]},{"fieldValue":"Tool","totalCount":1,"edges":[{"node":{"headings":[{"value":"Openapiファイルをディレクトリ構造で管理する","depth":1},{"value":"公式の<code class=\"language-text\">$ref</code>問題","depth":2},{"value":"OpenapiYaml","depth":2},{"value":"設計","depth":3},{"value":"まとめ","depth":2},{"value":"本来的な話","depth":2}],"excerpt":"Openapiファイルをディレクトリ構造で管理する Openapiは便利ですよね。 Openapiファイルがあれば、Client生成できますし、Mockサーバも作成でき、サーバ同士の通信でも使えますし、どんなデータを許容するのかもわかります。(きちんと書いていればですが..) …","frontmatter":{"createdAt":"2020-08-17","tags":["Node","Openapi","Tool"]}}}]},{"fieldValue":"お知らせ","totalCount":1,"edges":[{"node":{"headings":[{"value":"ブログ始めました","depth":1},{"value":"どんな人か","depth":2},{"value":"どんな内容を記載していくか","depth":2}],"excerpt":"ブログ始めました 某社にて新卒採用していただいてから4年がたったので、そろそろ自分の知識や考えを棚卸しをし、文章にまとめようと思いブログをはじめました。 どんな人か バックエンドエンジニアで入社しましたが、何故かフロントエンドをやる比率がいつのまにか高くなりフロントエンドエンジ…","frontmatter":{"createdAt":"2020-08-09","tags":["お知らせ"]}}}]}]}},"pageContext":{"title":"Openapiファイルをディレクトリ構造で管理する"}}}